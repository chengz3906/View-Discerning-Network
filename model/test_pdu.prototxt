
### Training Set
name: "GoogleNet"
input: "data"
input_dim: 80
input_dim: 3
input_dim: 224
input_dim: 224

input: "label1"
input_dim: 80
input_dim: 1
input_dim: 1
input_dim: 1


input: "label2"
input_dim: 8
input_dim: 1
input_dim: 1
input_dim: 1

### Validation Set

layer {
 bottom: "data"
  top: "conv1/7x7_s2"
  name: "conv1/7x7_s2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 3
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv1/7x7_s2"
  name: "conv1/7x7_s2/bn"
  top: "conv1/7x7_s2/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "conv1/7x7_s2/bn"
  top: "conv1/7x7_s2/bn/sc"
  name: "conv1/7x7_s2/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "conv1/7x7_s2/bn/sc"
  top: "conv1/7x7_s2/bn/sc"
  name: "conv1/7x7_s2/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "conv1/7x7_s2/bn/sc"
  top: "pool1/3x3_s2"
  name: "pool1/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
 bottom: "pool1/3x3_s2"
  top: "conv2/3x3_reduce"
  name: "conv2/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv2/3x3_reduce"
  name: "conv2/3x3_reduce/bn"
  top: "conv2/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "conv2/3x3_reduce/bn"
  top: "conv2/3x3_reduce/bn/sc"
  name: "conv2/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "conv2/3x3_reduce/bn/sc"
  top: "conv2/3x3_reduce/bn/sc"
  name: "conv2/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "conv2/3x3_reduce/bn/sc"
  top: "conv2/3x3"
  name: "conv2/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "conv2/3x3"
  name: "conv2/3x3/bn"
  top: "conv2/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "conv2/3x3/bn"
  top: "conv2/3x3/bn/sc"
  name: "conv2/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "conv2/3x3/bn/sc"
  top: "conv2/3x3/bn/sc"
  name: "conv2/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "conv2/3x3/bn/sc"
  top: "pool2/3x3_s2"
  name: "pool2/3x3_s2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
 bottom: "pool2/3x3_s2"
  top: "inception_3a/1x1"
  name: "inception_3a/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/1x1"
  name: "inception_3a/1x1/bn"
  top: "inception_3a/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/1x1/bn"
  top: "inception_3a/1x1/bn/sc"
  name: "inception_3a/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/1x1/bn/sc"
  top: "inception_3a/1x1/bn/sc"
  name: "inception_3a/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "pool2/3x3_s2"
  top: "inception_3a/3x3_reduce"
  name: "inception_3a/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/3x3_reduce"
  name: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/3x3_reduce/bn"
  top: "inception_3a/3x3_reduce/bn/sc"
  name: "inception_3a/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/3x3_reduce/bn/sc"
  top: "inception_3a/3x3_reduce/bn/sc"
  name: "inception_3a/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/3x3_reduce/bn/sc"
  top: "inception_3a/3x3"
  name: "inception_3a/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/3x3"
  name: "inception_3a/3x3/bn"
  top: "inception_3a/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/3x3/bn"
  top: "inception_3a/3x3/bn/sc"
  name: "inception_3a/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/3x3/bn/sc"
  top: "inception_3a/3x3/bn/sc"
  name: "inception_3a/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "pool2/3x3_s2"
  top: "inception_3a/double3x3_reduce"
  name: "inception_3a/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/double3x3_reduce"
  name: "inception_3a/double3x3_reduce/bn"
  top: "inception_3a/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/double3x3_reduce/bn"
  top: "inception_3a/double3x3_reduce/bn/sc"
  name: "inception_3a/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/double3x3_reduce/bn/sc"
  top: "inception_3a/double3x3_reduce/bn/sc"
  name: "inception_3a/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/double3x3_reduce/bn/sc"
  top: "inception_3a/double3x3a"
  name: "inception_3a/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/double3x3a"
  name: "inception_3a/double3x3a/bn"
  top: "inception_3a/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/double3x3a/bn"
  top: "inception_3a/double3x3a/bn/sc"
  name: "inception_3a/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/double3x3a/bn/sc"
  top: "inception_3a/double3x3a/bn/sc"
  name: "inception_3a/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/double3x3a/bn/sc"
  top: "inception_3a/double3x3b"
  name: "inception_3a/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/double3x3b"
  name: "inception_3a/double3x3b/bn"
  top: "inception_3a/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/double3x3b/bn"
  top: "inception_3a/double3x3b/bn/sc"
  name: "inception_3a/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/double3x3b/bn/sc"
  top: "inception_3a/double3x3b/bn/sc"
  name: "inception_3a/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "pool2/3x3_s2"
  top: "inception_3a/pool"
  name: "inception_3a/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_3a/pool"
  top: "inception_3a/pool_proj"
  name: "inception_3a/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 32
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3a/pool_proj"
  name: "inception_3a/pool_proj/bn"
  top: "inception_3a/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3a/pool_proj/bn"
  top: "inception_3a/pool_proj/bn/sc"
  name: "inception_3a/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3a/pool_proj/bn/sc"
  top: "inception_3a/pool_proj/bn/sc"
  name: "inception_3a/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/1x1/bn/sc"
  bottom: "inception_3a/3x3/bn/sc"
  bottom: "inception_3a/double3x3b/bn/sc"
  bottom: "inception_3a/pool_proj/bn/sc"
  top: "inception_3a/output"
  name: "inception_3a/output"
  type: "Concat"
}
layer {
 bottom: "inception_3a/output"
  top: "inception_3b/1x1"
  name: "inception_3b/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/1x1"
  name: "inception_3b/1x1/bn"
  top: "inception_3b/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/1x1/bn"
  top: "inception_3b/1x1/bn/sc"
  name: "inception_3b/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/1x1/bn/sc"
  top: "inception_3b/1x1/bn/sc"
  name: "inception_3b/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/output"
  top: "inception_3b/3x3_reduce"
  name: "inception_3b/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/3x3_reduce"
  name: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/3x3_reduce/bn"
  top: "inception_3b/3x3_reduce/bn/sc"
  name: "inception_3b/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/3x3_reduce/bn/sc"
  top: "inception_3b/3x3_reduce/bn/sc"
  name: "inception_3b/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/3x3_reduce/bn/sc"
  top: "inception_3b/3x3"
  name: "inception_3b/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/3x3"
  name: "inception_3b/3x3/bn"
  top: "inception_3b/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/3x3/bn"
  top: "inception_3b/3x3/bn/sc"
  name: "inception_3b/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/3x3/bn/sc"
  top: "inception_3b/3x3/bn/sc"
  name: "inception_3b/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3a/output"
  top: "inception_3b/double3x3_reduce"
  name: "inception_3b/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/double3x3_reduce"
  name: "inception_3b/double3x3_reduce/bn"
  top: "inception_3b/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/double3x3_reduce/bn"
  top: "inception_3b/double3x3_reduce/bn/sc"
  name: "inception_3b/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/double3x3_reduce/bn/sc"
  top: "inception_3b/double3x3_reduce/bn/sc"
  name: "inception_3b/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/double3x3_reduce/bn/sc"
  top: "inception_3b/double3x3a"
  name: "inception_3b/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/double3x3a"
  name: "inception_3b/double3x3a/bn"
  top: "inception_3b/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/double3x3a/bn"
  top: "inception_3b/double3x3a/bn/sc"
  name: "inception_3b/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/double3x3a/bn/sc"
  top: "inception_3b/double3x3a/bn/sc"
  name: "inception_3b/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/double3x3a/bn/sc"
  top: "inception_3b/double3x3b"
  name: "inception_3b/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/double3x3b"
  name: "inception_3b/double3x3b/bn"
  top: "inception_3b/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/double3x3b/bn"
  top: "inception_3b/double3x3b/bn/sc"
  name: "inception_3b/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/double3x3b/bn/sc"
  top: "inception_3b/double3x3b/bn/sc"
  name: "inception_3b/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3a/output"
  top: "inception_3b/pool"
  name: "inception_3b/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_3b/pool"
  top: "inception_3b/pool_proj"
  name: "inception_3b/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3b/pool_proj"
  name: "inception_3b/pool_proj/bn"
  top: "inception_3b/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3b/pool_proj/bn"
  top: "inception_3b/pool_proj/bn/sc"
  name: "inception_3b/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3b/pool_proj/bn/sc"
  top: "inception_3b/pool_proj/bn/sc"
  name: "inception_3b/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/1x1/bn/sc"
  bottom: "inception_3b/3x3/bn/sc"
  bottom: "inception_3b/double3x3b/bn/sc"
  bottom: "inception_3b/pool_proj/bn/sc"
  top: "inception_3b/output"
  name: "inception_3b/output"
  type: "Concat"
}
layer {
 bottom: "inception_3b/output"
  top: "inception_3c/3x3_reduce"
  name: "inception_3c/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/3x3_reduce"
  name: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3c/3x3_reduce/bn"
  top: "inception_3c/3x3_reduce/bn/sc"
  name: "inception_3c/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3c/3x3_reduce/bn/sc"
  top: "inception_3c/3x3_reduce/bn/sc"
  name: "inception_3c/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/3x3_reduce/bn/sc"
  top: "inception_3c/3x3"
  name: "inception_3c/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/3x3"
  name: "inception_3c/3x3/bn"
  top: "inception_3c/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3c/3x3/bn"
  top: "inception_3c/3x3/bn/sc"
  name: "inception_3c/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3c/3x3/bn/sc"
  top: "inception_3c/3x3/bn/sc"
  name: "inception_3c/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3b/output"
  top: "inception_3c/double3x3_reduce"
  name: "inception_3c/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/double3x3_reduce"
  name: "inception_3c/double3x3_reduce/bn"
  top: "inception_3c/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3c/double3x3_reduce/bn"
  top: "inception_3c/double3x3_reduce/bn/sc"
  name: "inception_3c/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3c/double3x3_reduce/bn/sc"
  top: "inception_3c/double3x3_reduce/bn/sc"
  name: "inception_3c/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/double3x3_reduce/bn/sc"
  top: "inception_3c/double3x3a"
  name: "inception_3c/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/double3x3a"
  name: "inception_3c/double3x3a/bn"
  top: "inception_3c/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3c/double3x3a/bn"
  top: "inception_3c/double3x3a/bn/sc"
  name: "inception_3c/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3c/double3x3a/bn/sc"
  top: "inception_3c/double3x3a/bn/sc"
  name: "inception_3c/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/double3x3a/bn/sc"
  top: "inception_3c/double3x3b"
  name: "inception_3c/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_3c/double3x3b"
  name: "inception_3c/double3x3b/bn"
  top: "inception_3c/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_3c/double3x3b/bn"
  top: "inception_3c/double3x3b/bn/sc"
  name: "inception_3c/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_3c/double3x3b/bn/sc"
  top: "inception_3c/double3x3b/bn/sc"
  name: "inception_3c/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3b/output"
  top: "inception_3c/pool"
  name: "inception_3c/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "inception_3c/3x3/bn/sc"
  bottom: "inception_3c/double3x3b/bn/sc"
  bottom: "inception_3c/pool"
  top: "inception_3c/output"
  name: "inception_3c/output"
  type: "Concat"
}
layer {
  bottom: "inception_3c/output"
  top: "pool3/5x5_s3"
  name: "pool3/5x5_s3"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 3
  }
}
layer {
 bottom: "pool3/5x5_s3"
  top: "loss1/conv"
  name: "loss1/conv"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss1/conv"
  name: "loss1/conv/bn"
  top: "loss1/conv/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "loss1/conv/bn"
  top: "loss1/conv/bn/sc"
  name: "loss1/conv/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "loss1/conv/bn/sc"
  top: "loss1/conv/bn/sc"
  name: "loss1/conv/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "loss1/conv/bn/sc"
  top: "loss1/fc"
  name: "loss1/fc"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss1/fc"
  name: "loss1/fc/bn"
  top: "loss1/fc/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "loss1/fc/bn"
  top: "loss1/fc/bn/sc"
  name: "loss1/fc/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "loss1/fc/bn/sc"
  top: "loss1/fc/bn/sc"
  name: "loss1/fc/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "loss1/fc/bn/sc"
  top: "loss1/classifier_1"
  name: "loss1/classifier_1-re"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 40
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
 bottom: "inception_3c/output"
  top: "inception_4a/1x1"
  name: "inception_4a/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 224
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/1x1"
  name: "inception_4a/1x1/bn"
  top: "inception_4a/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/1x1/bn"
  top: "inception_4a/1x1/bn/sc"
  name: "inception_4a/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/1x1/bn/sc"
  top: "inception_4a/1x1/bn/sc"
  name: "inception_4a/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/output"
  top: "inception_4a/3x3_reduce"
  name: "inception_4a/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/3x3_reduce"
  name: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/3x3_reduce/bn"
  top: "inception_4a/3x3_reduce/bn/sc"
  name: "inception_4a/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/3x3_reduce/bn/sc"
  top: "inception_4a/3x3_reduce/bn/sc"
  name: "inception_4a/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/3x3_reduce/bn/sc"
  top: "inception_4a/3x3"
  name: "inception_4a/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/3x3"
  name: "inception_4a/3x3/bn"
  top: "inception_4a/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/3x3/bn"
  top: "inception_4a/3x3/bn/sc"
  name: "inception_4a/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/3x3/bn/sc"
  top: "inception_4a/3x3/bn/sc"
  name: "inception_4a/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_3c/output"
  top: "inception_4a/double3x3_reduce"
  name: "inception_4a/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/double3x3_reduce"
  name: "inception_4a/double3x3_reduce/bn"
  top: "inception_4a/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/double3x3_reduce/bn"
  top: "inception_4a/double3x3_reduce/bn/sc"
  name: "inception_4a/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/double3x3_reduce/bn/sc"
  top: "inception_4a/double3x3_reduce/bn/sc"
  name: "inception_4a/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/double3x3_reduce/bn/sc"
  top: "inception_4a/double3x3a"
  name: "inception_4a/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/double3x3a"
  name: "inception_4a/double3x3a/bn"
  top: "inception_4a/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/double3x3a/bn"
  top: "inception_4a/double3x3a/bn/sc"
  name: "inception_4a/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/double3x3a/bn/sc"
  top: "inception_4a/double3x3a/bn/sc"
  name: "inception_4a/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/double3x3a/bn/sc"
  top: "inception_4a/double3x3b"
  name: "inception_4a/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/double3x3b"
  name: "inception_4a/double3x3b/bn"
  top: "inception_4a/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/double3x3b/bn"
  top: "inception_4a/double3x3b/bn/sc"
  name: "inception_4a/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/double3x3b/bn/sc"
  top: "inception_4a/double3x3b/bn/sc"
  name: "inception_4a/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_3c/output"
  top: "inception_4a/pool"
  name: "inception_4a/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_4a/pool"
  top: "inception_4a/pool_proj"
  name: "inception_4a/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4a/pool_proj"
  name: "inception_4a/pool_proj/bn"
  top: "inception_4a/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4a/pool_proj/bn"
  top: "inception_4a/pool_proj/bn/sc"
  name: "inception_4a/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4a/pool_proj/bn/sc"
  top: "inception_4a/pool_proj/bn/sc"
  name: "inception_4a/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/1x1/bn/sc"
  bottom: "inception_4a/3x3/bn/sc"
  bottom: "inception_4a/double3x3b/bn/sc"
  bottom: "inception_4a/pool_proj/bn/sc"
  top: "inception_4a/output"
  name: "inception_4a/output"
  type: "Concat"
}
layer {
 bottom: "inception_4a/output"
  top: "inception_4b/1x1"
  name: "inception_4b/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/1x1"
  name: "inception_4b/1x1/bn"
  top: "inception_4b/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/1x1/bn"
  top: "inception_4b/1x1/bn/sc"
  name: "inception_4b/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/1x1/bn/sc"
  top: "inception_4b/1x1/bn/sc"
  name: "inception_4b/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/output"
  top: "inception_4b/3x3_reduce"
  name: "inception_4b/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/3x3_reduce"
  name: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/3x3_reduce/bn"
  top: "inception_4b/3x3_reduce/bn/sc"
  name: "inception_4b/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/3x3_reduce/bn/sc"
  top: "inception_4b/3x3_reduce/bn/sc"
  name: "inception_4b/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/3x3_reduce/bn/sc"
  top: "inception_4b/3x3"
  name: "inception_4b/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/3x3"
  name: "inception_4b/3x3/bn"
  top: "inception_4b/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/3x3/bn"
  top: "inception_4b/3x3/bn/sc"
  name: "inception_4b/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/3x3/bn/sc"
  top: "inception_4b/3x3/bn/sc"
  name: "inception_4b/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4a/output"
  top: "inception_4b/double3x3_reduce"
  name: "inception_4b/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/double3x3_reduce"
  name: "inception_4b/double3x3_reduce/bn"
  top: "inception_4b/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/double3x3_reduce/bn"
  top: "inception_4b/double3x3_reduce/bn/sc"
  name: "inception_4b/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/double3x3_reduce/bn/sc"
  top: "inception_4b/double3x3_reduce/bn/sc"
  name: "inception_4b/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/double3x3_reduce/bn/sc"
  top: "inception_4b/double3x3a"
  name: "inception_4b/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/double3x3a"
  name: "inception_4b/double3x3a/bn"
  top: "inception_4b/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/double3x3a/bn"
  top: "inception_4b/double3x3a/bn/sc"
  name: "inception_4b/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/double3x3a/bn/sc"
  top: "inception_4b/double3x3a/bn/sc"
  name: "inception_4b/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/double3x3a/bn/sc"
  top: "inception_4b/double3x3b"
  name: "inception_4b/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/double3x3b"
  name: "inception_4b/double3x3b/bn"
  top: "inception_4b/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/double3x3b/bn"
  top: "inception_4b/double3x3b/bn/sc"
  name: "inception_4b/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/double3x3b/bn/sc"
  top: "inception_4b/double3x3b/bn/sc"
  name: "inception_4b/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4a/output"
  top: "inception_4b/pool"
  name: "inception_4b/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_4b/pool"
  top: "inception_4b/pool_proj"
  name: "inception_4b/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4b/pool_proj"
  name: "inception_4b/pool_proj/bn"
  top: "inception_4b/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4b/pool_proj/bn"
  top: "inception_4b/pool_proj/bn/sc"
  name: "inception_4b/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4b/pool_proj/bn/sc"
  top: "inception_4b/pool_proj/bn/sc"
  name: "inception_4b/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/1x1/bn/sc"
  bottom: "inception_4b/3x3/bn/sc"
  bottom: "inception_4b/double3x3b/bn/sc"
  bottom: "inception_4b/pool_proj/bn/sc"
  top: "inception_4b/output"
  name: "inception_4b/output"
  type: "Concat"
}
layer {
 bottom: "inception_4b/output"
  top: "inception_4c/1x1"
  name: "inception_4c/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/1x1"
  name: "inception_4c/1x1/bn"
  top: "inception_4c/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/1x1/bn"
  top: "inception_4c/1x1/bn/sc"
  name: "inception_4c/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/1x1/bn/sc"
  top: "inception_4c/1x1/bn/sc"
  name: "inception_4c/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/output"
  top: "inception_4c/3x3_reduce"
  name: "inception_4c/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/3x3_reduce"
  name: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/3x3_reduce/bn"
  top: "inception_4c/3x3_reduce/bn/sc"
  name: "inception_4c/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/3x3_reduce/bn/sc"
  top: "inception_4c/3x3_reduce/bn/sc"
  name: "inception_4c/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/3x3_reduce/bn/sc"
  top: "inception_4c/3x3"
  name: "inception_4c/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/3x3"
  name: "inception_4c/3x3/bn"
  top: "inception_4c/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/3x3/bn"
  top: "inception_4c/3x3/bn/sc"
  name: "inception_4c/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/3x3/bn/sc"
  top: "inception_4c/3x3/bn/sc"
  name: "inception_4c/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4b/output"
  top: "inception_4c/double3x3_reduce"
  name: "inception_4c/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/double3x3_reduce"
  name: "inception_4c/double3x3_reduce/bn"
  top: "inception_4c/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/double3x3_reduce/bn"
  top: "inception_4c/double3x3_reduce/bn/sc"
  name: "inception_4c/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/double3x3_reduce/bn/sc"
  top: "inception_4c/double3x3_reduce/bn/sc"
  name: "inception_4c/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/double3x3_reduce/bn/sc"
  top: "inception_4c/double3x3a"
  name: "inception_4c/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/double3x3a"
  name: "inception_4c/double3x3a/bn"
  top: "inception_4c/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/double3x3a/bn"
  top: "inception_4c/double3x3a/bn/sc"
  name: "inception_4c/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/double3x3a/bn/sc"
  top: "inception_4c/double3x3a/bn/sc"
  name: "inception_4c/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/double3x3a/bn/sc"
  top: "inception_4c/double3x3b"
  name: "inception_4c/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/double3x3b"
  name: "inception_4c/double3x3b/bn"
  top: "inception_4c/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/double3x3b/bn"
  top: "inception_4c/double3x3b/bn/sc"
  name: "inception_4c/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/double3x3b/bn/sc"
  top: "inception_4c/double3x3b/bn/sc"
  name: "inception_4c/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4b/output"
  top: "inception_4c/pool"
  name: "inception_4c/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_4c/pool"
  top: "inception_4c/pool_proj"
  name: "inception_4c/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4c/pool_proj"
  name: "inception_4c/pool_proj/bn"
  top: "inception_4c/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4c/pool_proj/bn"
  top: "inception_4c/pool_proj/bn/sc"
  name: "inception_4c/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4c/pool_proj/bn/sc"
  top: "inception_4c/pool_proj/bn/sc"
  name: "inception_4c/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/1x1/bn/sc"
  bottom: "inception_4c/3x3/bn/sc"
  bottom: "inception_4c/double3x3b/bn/sc"
  bottom: "inception_4c/pool_proj/bn/sc"
  top: "inception_4c/output"
  name: "inception_4c/output"
  type: "Concat"
}
layer {
 bottom: "inception_4c/output"
  top: "inception_4d/1x1"
  name: "inception_4d/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/1x1"
  name: "inception_4d/1x1/bn"
  top: "inception_4d/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/1x1/bn"
  top: "inception_4d/1x1/bn/sc"
  name: "inception_4d/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/1x1/bn/sc"
  top: "inception_4d/1x1/bn/sc"
  name: "inception_4d/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/output"
  top: "inception_4d/3x3_reduce"
  name: "inception_4d/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/3x3_reduce"
  name: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/3x3_reduce/bn"
  top: "inception_4d/3x3_reduce/bn/sc"
  name: "inception_4d/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/3x3_reduce/bn/sc"
  top: "inception_4d/3x3_reduce/bn/sc"
  name: "inception_4d/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/3x3_reduce/bn/sc"
  top: "inception_4d/3x3"
  name: "inception_4d/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/3x3"
  name: "inception_4d/3x3/bn"
  top: "inception_4d/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/3x3/bn"
  top: "inception_4d/3x3/bn/sc"
  name: "inception_4d/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/3x3/bn/sc"
  top: "inception_4d/3x3/bn/sc"
  name: "inception_4d/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4c/output"
  top: "inception_4d/double3x3_reduce"
  name: "inception_4d/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/double3x3_reduce"
  name: "inception_4d/double3x3_reduce/bn"
  top: "inception_4d/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/double3x3_reduce/bn"
  top: "inception_4d/double3x3_reduce/bn/sc"
  name: "inception_4d/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/double3x3_reduce/bn/sc"
  top: "inception_4d/double3x3_reduce/bn/sc"
  name: "inception_4d/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/double3x3_reduce/bn/sc"
  top: "inception_4d/double3x3a"
  name: "inception_4d/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/double3x3a"
  name: "inception_4d/double3x3a/bn"
  top: "inception_4d/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/double3x3a/bn"
  top: "inception_4d/double3x3a/bn/sc"
  name: "inception_4d/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/double3x3a/bn/sc"
  top: "inception_4d/double3x3a/bn/sc"
  name: "inception_4d/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/double3x3a/bn/sc"
  top: "inception_4d/double3x3b"
  name: "inception_4d/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/double3x3b"
  name: "inception_4d/double3x3b/bn"
  top: "inception_4d/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/double3x3b/bn"
  top: "inception_4d/double3x3b/bn/sc"
  name: "inception_4d/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/double3x3b/bn/sc"
  top: "inception_4d/double3x3b/bn/sc"
  name: "inception_4d/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4c/output"
  top: "inception_4d/pool"
  name: "inception_4d/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_4d/pool"
  top: "inception_4d/pool_proj"
  name: "inception_4d/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 96
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4d/pool_proj"
  name: "inception_4d/pool_proj/bn"
  top: "inception_4d/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4d/pool_proj/bn"
  top: "inception_4d/pool_proj/bn/sc"
  name: "inception_4d/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4d/pool_proj/bn/sc"
  top: "inception_4d/pool_proj/bn/sc"
  name: "inception_4d/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/1x1/bn/sc"
  bottom: "inception_4d/3x3/bn/sc"
  bottom: "inception_4d/double3x3b/bn/sc"
  bottom: "inception_4d/pool_proj/bn/sc"
  top: "inception_4d/output"
  name: "inception_4d/output"
  type: "Concat"
}
layer {
 bottom: "inception_4d/output"
  top: "inception_4e/3x3_reduce"
  name: "inception_4e/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/3x3_reduce"
  name: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4e/3x3_reduce/bn"
  top: "inception_4e/3x3_reduce/bn/sc"
  name: "inception_4e/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4e/3x3_reduce/bn/sc"
  top: "inception_4e/3x3_reduce/bn/sc"
  name: "inception_4e/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/3x3_reduce/bn/sc"
  top: "inception_4e/3x3"
  name: "inception_4e/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/3x3"
  name: "inception_4e/3x3/bn"
  top: "inception_4e/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4e/3x3/bn"
  top: "inception_4e/3x3/bn/sc"
  name: "inception_4e/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4e/3x3/bn/sc"
  top: "inception_4e/3x3/bn/sc"
  name: "inception_4e/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4d/output"
  top: "inception_4e/double3x3_reduce"
  name: "inception_4e/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/double3x3_reduce"
  name: "inception_4e/double3x3_reduce/bn"
  top: "inception_4e/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4e/double3x3_reduce/bn"
  top: "inception_4e/double3x3_reduce/bn/sc"
  name: "inception_4e/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4e/double3x3_reduce/bn/sc"
  top: "inception_4e/double3x3_reduce/bn/sc"
  name: "inception_4e/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/double3x3_reduce/bn/sc"
  top: "inception_4e/double3x3a"
  name: "inception_4e/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/double3x3a"
  name: "inception_4e/double3x3a/bn"
  top: "inception_4e/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4e/double3x3a/bn"
  top: "inception_4e/double3x3a/bn/sc"
  name: "inception_4e/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4e/double3x3a/bn/sc"
  top: "inception_4e/double3x3a/bn/sc"
  name: "inception_4e/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/double3x3a/bn/sc"
  top: "inception_4e/double3x3b"
  name: "inception_4e/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_4e/double3x3b"
  name: "inception_4e/double3x3b/bn"
  top: "inception_4e/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_4e/double3x3b/bn"
  top: "inception_4e/double3x3b/bn/sc"
  name: "inception_4e/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_4e/double3x3b/bn/sc"
  top: "inception_4e/double3x3b/bn/sc"
  name: "inception_4e/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4d/output"
  top: "inception_4e/pool"
  name: "inception_4e/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  bottom: "inception_4e/3x3/bn/sc"
  bottom: "inception_4e/double3x3b/bn/sc"
  bottom: "inception_4e/pool"
  top: "inception_4e/output"
  name: "inception_4e/output"
  type: "Concat"
}
layer {
  bottom: "inception_4e/output"
  top: "pool4/5x5_s3"
  name: "pool4/5x5_s3"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 3
  }
}
layer {
 bottom: "pool4/5x5_s3"
  top: "loss2/conv"
  name: "loss2/conv"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss2/conv"
  name: "loss2/conv/bn"
  top: "loss2/conv/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "loss2/conv/bn"
  top: "loss2/conv/bn/sc"
  name: "loss2/conv/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "loss2/conv/bn/sc"
  top: "loss2/conv/bn/sc"
  name: "loss2/conv/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "loss2/conv/bn/sc"
  top: "loss2/fc"
  name: "loss2/fc"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  inner_product_param {
    num_output: 1024
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "loss2/fc"
  name: "loss2/fc/bn"
  top: "loss2/fc/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "loss2/fc/bn"
  top: "loss2/fc/bn/sc"
  name: "loss2/fc/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "loss2/fc/bn/sc"
  top: "loss2/fc/bn/sc"
  name: "loss2/fc/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "loss2/fc/bn/sc"
  top: "loss2/classifier_1"
  name: "loss2/classifier_1-re"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 40
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
 bottom: "inception_4e/output"
  top: "inception_5a/1x1"
  name: "inception_5a/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 352
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/1x1"
  name: "inception_5a/1x1/bn"
  top: "inception_5a/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/1x1/bn"
  top: "inception_5a/1x1/bn/sc"
  name: "inception_5a/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/1x1/bn/sc"
  top: "inception_5a/1x1/bn/sc"
  name: "inception_5a/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/output"
  top: "inception_5a/3x3_reduce"
  name: "inception_5a/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/3x3_reduce"
  name: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/3x3_reduce/bn"
  top: "inception_5a/3x3_reduce/bn/sc"
  name: "inception_5a/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/3x3_reduce/bn/sc"
  top: "inception_5a/3x3_reduce/bn/sc"
  name: "inception_5a/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/3x3_reduce/bn/sc"
  top: "inception_5a/3x3"
  name: "inception_5a/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/3x3"
  name: "inception_5a/3x3/bn"
  top: "inception_5a/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/3x3/bn"
  top: "inception_5a/3x3/bn/sc"
  name: "inception_5a/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/3x3/bn/sc"
  top: "inception_5a/3x3/bn/sc"
  name: "inception_5a/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_4e/output"
  top: "inception_5a/double3x3_reduce"
  name: "inception_5a/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 160
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/double3x3_reduce"
  name: "inception_5a/double3x3_reduce/bn"
  top: "inception_5a/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/double3x3_reduce/bn"
  top: "inception_5a/double3x3_reduce/bn/sc"
  name: "inception_5a/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/double3x3_reduce/bn/sc"
  top: "inception_5a/double3x3_reduce/bn/sc"
  name: "inception_5a/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/double3x3_reduce/bn/sc"
  top: "inception_5a/double3x3a"
  name: "inception_5a/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 224
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/double3x3a"
  name: "inception_5a/double3x3a/bn"
  top: "inception_5a/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/double3x3a/bn"
  top: "inception_5a/double3x3a/bn/sc"
  name: "inception_5a/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/double3x3a/bn/sc"
  top: "inception_5a/double3x3a/bn/sc"
  name: "inception_5a/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5a/double3x3a/bn/sc"
  top: "inception_5a/double3x3b"
  name: "inception_5a/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 224
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/double3x3b"
  name: "inception_5a/double3x3b/bn"
  top: "inception_5a/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/double3x3b/bn"
  top: "inception_5a/double3x3b/bn/sc"
  name: "inception_5a/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/double3x3b/bn/sc"
  top: "inception_5a/double3x3b/bn/sc"
  name: "inception_5a/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_4e/output"
  top: "inception_5a/pool"
  name: "inception_5a/pool"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_5a/pool"
  top: "inception_5a/pool_proj"
  name: "inception_5a/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5a/pool_proj"
  name: "inception_5a/pool_proj/bn"
  top: "inception_5a/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5a/pool_proj/bn"
  top: "inception_5a/pool_proj/bn/sc"
  name: "inception_5a/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5a/pool_proj/bn/sc"
  top: "inception_5a/pool_proj/bn/sc"
  name: "inception_5a/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_5a/1x1/bn/sc"
  bottom: "inception_5a/3x3/bn/sc"
  bottom: "inception_5a/double3x3b/bn/sc"
  bottom: "inception_5a/pool_proj/bn/sc"
  top: "inception_5a/output"
  name: "inception_5a/output"
  type: "Concat"
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 48
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    pad : 1
    kernel_size: 5
    stride: 4
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.015
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv3"
  name: "conv3/bn"
  top: "conv3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "conv3/bn"
  top: "sig"
  name: "sig"
  type: "Sigmoid"
}
layer{
  name: "reshapesig"
  type: "Reshape"
  bottom: "sig"
  top: "output"
  reshape_param {
    shape { dim: -1 dim: 1 dim: 7 dim: 7}
  }
}

layer {
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  bottom: "output"
  top: "realoutput"
  name: "realoutput"
  type: "Concat"
  concat_param {
    axis: 1
  }
}
layer{
  name: "feature_mod"
  bottom: "inception_5a/output"
  bottom: "realoutput"
  top: "feature_mod"
  type: "Eltwise"
  eltwise_param{
    operation: PROD
  }
}
layer {
  name: "splitfmod"
  type : "Slice"
  bottom : "feature_mod"
  top : "feature_mod_0"
  top : "feature_mod_1"
  top : "feature_mod_2"
  top : "feature_mod_3"
  top : "feature_mod_4"
  top : "feature_mod_5"
  top : "feature_mod_6"
  top : "feature_mod_7"
  top : "feature_mod_8"
  top : "feature_mod_9"
  slice_param{
    axis : 0
    slice_point: 8
    slice_point: 16
    slice_point: 24
    slice_point: 32
    slice_point: 40
    slice_point: 48
    slice_point: 56
    slice_point: 64
    slice_point: 72
  }
}
layer{
  name: "feature_agg"
  bottom : "feature_mod_0"
  bottom : "feature_mod_1"
  bottom : "feature_mod_2"
  bottom : "feature_mod_3"
  bottom : "feature_mod_4"
  bottom : "feature_mod_5"
  bottom : "feature_mod_6"
  bottom : "feature_mod_7"
  bottom : "feature_mod_8"
  bottom : "feature_mod_9"
  top : "weightfeature"
  type: "Eltwise"
  eltwise_param{
    operation: SUM
  }
}
layer {
 bottom: "weightfeature"
  top: "inception_5b/1x1"
  name: "inception_5b/1x1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 352
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/1x1"
  name: "inception_5b/1x1/bn"
  top: "inception_5b/1x1/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/1x1/bn"
  top: "inception_5b/1x1/bn/sc"
  name: "inception_5b/1x1/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/1x1/bn/sc"
  top: "inception_5b/1x1/bn/sc"
  name: "inception_5b/1x1/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "weightfeature"
  top: "inception_5b/3x3_reduce"
  name: "inception_5b/3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/3x3_reduce"
  name: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/3x3_reduce/bn"
  top: "inception_5b/3x3_reduce/bn/sc"
  name: "inception_5b/3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/3x3_reduce/bn/sc"
  top: "inception_5b/3x3_reduce/bn/sc"
  name: "inception_5b/3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5b/3x3_reduce/bn/sc"
  top: "inception_5b/3x3"
  name: "inception_5b/3x3"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 320
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/3x3"
  name: "inception_5b/3x3/bn"
  top: "inception_5b/3x3/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/3x3/bn"
  top: "inception_5b/3x3/bn/sc"
  name: "inception_5b/3x3/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/3x3/bn/sc"
  top: "inception_5b/3x3/bn/sc"
  name: "inception_5b/3x3/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "weightfeature"
  top: "inception_5b/double3x3_reduce"
  name: "inception_5b/double3x3_reduce"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 192
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/double3x3_reduce"
  name: "inception_5b/double3x3_reduce/bn"
  top: "inception_5b/double3x3_reduce/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/double3x3_reduce/bn"
  top: "inception_5b/double3x3_reduce/bn/sc"
  name: "inception_5b/double3x3_reduce/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/double3x3_reduce/bn/sc"
  top: "inception_5b/double3x3_reduce/bn/sc"
  name: "inception_5b/double3x3_reduce/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5b/double3x3_reduce/bn/sc"
  top: "inception_5b/double3x3a"
  name: "inception_5b/double3x3a"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 224
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/double3x3a"
  name: "inception_5b/double3x3a/bn"
  top: "inception_5b/double3x3a/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/double3x3a/bn"
  top: "inception_5b/double3x3a/bn/sc"
  name: "inception_5b/double3x3a/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/double3x3a/bn/sc"
  top: "inception_5b/double3x3a/bn/sc"
  name: "inception_5b/double3x3a/bn/sc/relu"
  type: "ReLU"
}
layer {
 bottom: "inception_5b/double3x3a/bn/sc"
  top: "inception_5b/double3x3b"
  name: "inception_5b/double3x3b"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 224
    pad: 1
    kernel_size: 3
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/double3x3b"
  name: "inception_5b/double3x3b/bn"
  top: "inception_5b/double3x3b/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/double3x3b/bn"
  top: "inception_5b/double3x3b/bn/sc"
  name: "inception_5b/double3x3b/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/double3x3b/bn/sc"
  top: "inception_5b/double3x3b/bn/sc"
  name: "inception_5b/double3x3b/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "weightfeature"
  top: "inception_5b/pool"
  name: "inception_5b/pool"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 1
    pad: 1
  }
}
layer {
 bottom: "inception_5b/pool"
  top: "inception_5b/pool_proj"
  name: "inception_5b/pool_proj"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_term: false
  }
}
layer {
  bottom: "inception_5b/pool_proj"
  name: "inception_5b/pool_proj/bn"
  top: "inception_5b/pool_proj/bn"
  type: "BatchNorm" param {lr_mult: 0.0} param {lr_mult: 0.0} param {lr_mult: 0.0}
}
layer {
  bottom: "inception_5b/pool_proj/bn"
  top: "inception_5b/pool_proj/bn/sc"
  name: "inception_5b/pool_proj/bn/sc"
  type: "Scale" param {lr_mult: 0.0} param {lr_mult: 0.0}
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "inception_5b/pool_proj/bn/sc"
  top: "inception_5b/pool_proj/bn/sc"
  name: "inception_5b/pool_proj/bn/sc/relu"
  type: "ReLU"
}
layer {
  bottom: "inception_5b/1x1/bn/sc"
  bottom: "inception_5b/3x3/bn/sc"
  bottom: "inception_5b/double3x3b/bn/sc"
  bottom: "inception_5b/pool_proj/bn/sc"
  top: "inception_5b/output"
  name: "inception_5b/output"
  type: "Concat"
}
layer {
  bottom: "inception_5b/output"
  top: "pool5/7x7_s1"
  name: "pool5/7x7_s1"
  type: "Pooling"
  pooling_param {
    pool: AVE
    kernel_size: 7
    stride: 1
  }
}

layer {
  bottom: "pool5/7x7_s1"
  top: "loss3/classifier_1"
  name: "loss3/classifier_1-re"
  type: "InnerProduct"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 40
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "loss3/classifier_1"
  top: "loss3/prob"
  name: "loss3/prob"
  type: "Softmax"
}
layer {
  bottom: "loss3/prob"
  bottom: "label2"
  top: "loss3/top-1"
  name: "loss3/top-1"
  type: "Accuracy"
}